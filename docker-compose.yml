version: '3.7'
#
#volumes:
#  redis:
#    driver: ${VOLUMES_DRIVER}
volumes:
  postgres:
  pgadmin:

networks:
  bridge: ~
  traefik:
    external: true
    name: ${TRAEFIK_NETWORK_NAME}
  pgadmin:

# Internal communications
#  frontend: ~

#  Backend API. Нужна, только если мы общаемся с API через сеть Docker.
#  backend:
#    external:
#      name: name_backend

services:

  ### Redis ################################################
#  redis:
#    build: ./docker/redis
#    volumes:
#      - ${DATA_PATH_HOST}/redis:/data
#    networks:
##      - traefik
#      - bridge

  postgres:
    user: postgres
    build:
      context: .docker/postgres
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${MYSQL_USER}
      POSTGRES_PASSWORD: ${MYSQL_PASSWORD}
#      PGDATA: /data/postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres:/data/postgres
#      - pg-data:/pg-data
    ports:
      - "5432:5432"
    networks:
      - bridge
#    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${MYSQL_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: '123'
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./pgadmin:/var/lib/pgadmin

    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - bridge
    restart: unless-stopped

  mysql:
    user: mysql
    hostname: mysql_backend
    build:
      context: .docker/mysql
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    ports:
      - ${MYSQL_HOST_PORT}:3306
    networks:
      - bridge
    volumes:
      - ./mysql:/var/lib/mysql
      - .docker/mysql/initdb:/docker-entrypoint-initdb.d


  node-nuxt:
    #    depends_on:
    #      - redis
    build:
      # Для сборки готового образа нам понадобится скопировать исходники в образ при сборке, поэтому контекст -
      # каталог проекта
      context: .
      dockerfile: .docker/node-nuxt/Dockerfile
      # По умолчанию собираем готовый образ приложения (т.е. образ с готовой и настренной сборкой, см. Dockerfile)
      target: app
    networks:
      - bridge
    env_file:
      - .env
#    links:
#      - redis
#      - backend

  node-react:
    #    depends_on:
    #      - redis
    build:
      # Для сборки готового образа нам понадобится скопировать исходники в образ при сборке, поэтому контекст -
      # каталог проекта
      context: .
      dockerfile: .docker/node-react/Dockerfile
      # По умолчанию собираем готовый образ приложения (т.е. образ с готовой и настренной сборкой, см. Dockerfile)
      target: app
    networks:
      - bridge
    env_file:
      - .env
    ports:
      - "3000:3000"
  #    links:
  #      - redis
  #      - backend

  backend:
    depends_on:
      - node-react
      - node-nuxt
      #      - mysql
      - postgres
    #      - redis
    build:
      # Для сборки готового образа нам понадобится скопировать исходники в образ при сборке, поэтому контекст -
      # каталог проекта
      context: .
      dockerfile: .docker/backendjs/Dockerfile
      # По умолчанию собираем готовый образ приложения (т.е. образ с готовой и настренной сборкой, см. Dockerfile)
      target: app
    networks:
      - bridge
    env_file:
      - .env
  #    links:
  #      - redis
  #      - backend
